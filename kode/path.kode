###
00000000    0000000   000000000  000   000    
000   000  000   000     000     000   000    
00000000   000000000     000     000000000    
000        000   000     000     000   000    
000        000   000     000     000   000    
###

CHAR_FORWARD_SLASH  = '/'.charCodeAt 0
CHAR_BACKWARD_SLASH = '\\'.charCodeAt 0
CHAR_DOT            = '.'.charCodeAt 0

isPosixPathSeparator = (c) -> c == CHAR_FORWARD_SLASH
isPathSeparator = (c) -> c == CHAR_FORWARD_SLASH or c == CHAR_BACKWARD_SLASH

normalizeString = (path, isAbsolute, separator, isPathSeparator) ->
    
    res = ''
    lastSegmentLength = 0
    lastSlash = -1
    dots = 0
    code = 0
    
    for i in 0..path.length
        
        if i < path.length
            code = path.charCodeAt i
        else if isPathSeparator code
            break
        else
            code = CHAR_FORWARD_SLASH
   
        if isPathSeparator code
            if lastSlash == i - 1 or dots == 1
                true # noop
            else if dots == 2
                if (res.length < 2 or 
                    lastSegmentLength != 2 or
                    res.charCodeAt(res.length - 1) != CHAR_DOT or
                    res.charCodeAt(res.length - 2) != CHAR_DOT)
                    if res.length > 2
                        lastSlashIndex = res.lastIndexOf separator
                        if lastSlashIndex == -1
                            res = ''
                            lastSegmentLength = 0
                        else
                            res = res.slice 0 lastSlashIndex
                            lastSegmentLength = res.length - 1 - res.lastIndexOf separator
                        lastSlash = i
                        dots = 0
                        continue
                    else if res.length != 0
                        res = ''
                        lastSegmentLength = 0
                        lastSlash = i
                        dots = 0
                        continue
                if not isAbsolute
                    res += res.length > 0 ? "#{separator}.." : '..'
                    lastSegmentLength = 2
            else 
                if res.length > 0
                    res += "#{separator}#{path.slice(lastSlash + 1, i)}"
                else
                    res = path.slice lastSlash + 1, i
                lastSegmentLength = i - lastSlash - 1

            lastSlash = i
            dots = 0
        else if code == CHAR_DOT and dots != -1
            dots++
        else 
            dots = -1
    return res

toExport =
    
    sep:'/' 
    
    normalize: (path) ->
        
        return path if not path is str
    
        return '' if path.length == 0
    
        isAbsolute = isPathSeparator path.charCodeAt 0
        trailingSeparator = isPathSeparator path.charCodeAt path.length - 1
    
        path = normalizeString path, isAbsolute, '/', isPathSeparator
    
        if path.length == 0
            return '/' if isAbsolute
            return trailingSeparator ? './' : '.'

        if trailingSeparator
            path += '/'
    
        isAbsolute ? "/#{path}" : path
        
# module.exports = toExport
export toExport
